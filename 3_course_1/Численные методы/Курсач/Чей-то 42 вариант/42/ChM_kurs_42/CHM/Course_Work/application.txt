/* 
   МКЭ для двумерной краевой задачи для эллиптического уравнения в декартовой системе координат. 
   Базисные функции билинейные на прямоугольниках. Краевые условия всех типов. 
   Коэффициент диффузии разложить по биквадратичным базисным функциям. 
   Матрицу СЛАУ генеририруется в разреженном строчном формате. 
   Для решения СЛАУ использовалась ЛОС с неполной факторизацией.
*/
/*
#include <stdio.h>
#include <memory.h>
#include <math.h>

#define EPS			1.0e-30			   // точность решения СЛАУ
#define PI			3.141592653589793  // число Пи
#define MEMORY		200000			   // объем памяти
#define MAX_ITER	2000


// Описание класса метода конечных элементов
class method
{
private: double *global,	// указатель области памяти
				*GridX,		// сетка для Х
				*GridY,		// сетка для У
				*di,		// диагональ исходной матрицы
				*ggl,		// нижний треугольник исходной матрицы
				*ggu,		// верхний треугольник исходной матрицы
				*r,			// вспомогательный вектор
				*x,			// вектор решения
				*f,			// вектор правой части
				*p,			// вспомогательный вектор
				*z,			// вспомогательный вектор
				*q,			// вспомогательный вектор
				*L,			// нижний треугольник обусловленной матрицы
				*U,			// верхний треугольник обусловленной матрицы
				*diag,		// диагональ обусловленной матрицы
				*s,			// вспомогательный вектор
				*sout,		// вспомогательный вектор
				eps;		// точность решения
		 int	*ig,		// портрет матрицы
				*jg,
				N,			// размерность СЛАУ
				Nx,			// количество по Х
				Ny,			// количество по Y
				maxiter;	// максимальное количествто итераций
		 int	AtoU();		// функция факторизации
		 void	makeslae();	// ассемблирование матрицы СЛАУ
		 void	GetInfo();	// получение параметов
		 void	ReadGrid();	// чтение сетки
		 void	AddToMatrix(int, int, double);	// добаление в матрицу
		 double GetLambda(double,double);		// коэффициент лямбда
		 double GetGamma(double,double);		// коэффициент гамма
		 double GetF(double,double);			// правая часть
		 double	GetIdeal(double,double);		// точное решение
		 void	GaussL(double *,double *);		// Решение СЛАУ
		 void	GaussU(double *,double *);		// Решение СЛАУ
		 // Умножение матрицы на вектор
		 void	MultVectorAndMatrix(double *,double *);	
		 // Скалярное произведение векторов
         double ScalarMult(double *,double *);	
		 double sm(int,int);	// Скалярное произведение факторизации
public:  method();				// Конструктор класса
		 ~method();				// Деструктор класса
		 void run();			// Выполнение метода
};

// Определение функций класса
method::method()
{
	int i, k;
	global = new double[MEMORY];			// выделение памяти
	memset(global,0,MEMORY*sizeof(double));	// еe зануление
	maxiter = MAX_ITER;		
	eps = EPS;
	GetInfo();						// Получение информации о задаче
	//	Настройка указателей
	ig = (int *)global;
	jg = (int *)(global+N+1);
	//	Генерация портрета матрицы
	int istep = 0;
	for(i=0;i<N+1;i++)
	{
		ig[i] = istep;
		istep += i;
	}
	istep = 0;
	for(i=0;i<N;i++)
		for(k=0;k<i;k++)
		{
			jg[istep] = k;
			istep++;
		}
	//	Настройка указателей
	ggl = global+N+1+ig[N];
	ggu = global+2*(ig[N])+N+1;
	di	= global+3*(ig[N])+N+1;
	f	= di+N;
	r	= f+N;
	z	= r+N;
	p	= z+N;
	q	= p+N;
	diag= q+N;
	L	= diag+N;
	U	= L+ig[N];
	x	= U+ig[N];
	s	= x+N;
	sout= s+N;
	GridX = sout + N;
	GridY = GridX + Nx;
	ReadGrid();
	// Сборка глобальной матрицы
	makeslae();
}

//	Получение начальных данных
void method::GetInfo()
{
	FILE* Fin;
	Fin = fopen("Area.txt","r");
	fscanf(Fin,"%d %d",&Nx,&Ny);
	N = Nx * Ny;					// размер матрицу СЛАУ
	fclose(Fin);
}
void method::ReadGrid()
{
	FILE* Fin;
	int i;
	// Чтение сетки по оси Х
	Fin = fopen("GridX.txt","r");
	for(i=0;i<Nx;i++)	
		fscanf(Fin,"%lf",&GridX[i]);
	fclose(Fin);
	// Чтение сетки по оси У
	Fin = fopen("GridY.txt","r");
	for(i=0;i<Ny;i++)	
		fscanf(Fin,"%lf",&GridY[i]);
	fclose(Fin);
}

//	Значение коэффициентов
double method::GetLambda(double x, double y)
{
	return 1;
}
double method::GetGamma(double x, double y)
{
	return 1;
}
double method::GetF(double x, double y)
{
	return pow(x,2) + pow(y,2);
}
double method::GetIdeal(double x, double y)
{
	return pow(x,2) + pow(y,2);
}

//	Добавление элементов в матртцу
void method::AddToMatrix(int i, int j, double el)
{
	int k;
	if(i==j)  di[i]+=el;
	else
	{

		if(i>j)
		{
			for(k=ig[i];k<ig[i+1];k++)
				if(jg[k]==j) ggl[k]+=el;
		}
		else
		{
   			for(k=ig[j];k<ig[j+1];k++)
				if(jg[k]==i) ggu[k]+=el;
		}
	}
}

//	Сборка глобальной матрицы
void method::makeslae()
{	
	int		i, k, i1, k1;
	int		Index[4];	// номера узлов
	double	lambda, gamma, px, y, xp, yp, hx, hy;	// параметры КЭ
	double	tmp, hx2, hy2, ud, u1, u2, u3;
	double	fv[4];		// значения правой части
	double	B[4][4],	// матрица жёсткости
			C[4][4],	// матрица масс
			F[4];		// вектор правой части
	
	// Процедура ассемблирования глобальной матрицы
	for(k=0;k<Ny-1;k++)
		for(i=0;i<Nx-1;i++)
		{
			px = GridX[i];		// опорная точка
			y = GridY[k];
			xp = GridX[i+1];	// верхняя точка
			yp = GridY[k+1];

			hx = xp - px;		// шаги
			hy = yp - y;
			hx2 = hx * hx;
			hy2 = hy * hy;

			lambda	= GetLambda(px+hx/2.0,y+hy/2.0);	// коэффициенты
			gamma	= GetGamma (px+hx/2.0,y+hy/2.0);
			
			fv[0] = GetF(px,y);		// значения правой части
			fv[1] = GetF(xp,y);
			fv[2] = GetF(px,yp);
			fv[3] = GetF(xp,yp);

			// Задаём значения матрицы жёсткости и матрицы масс
			tmp = 1.0/(hx*hy);

			ud = (hx2+hy2)*tmp/3;
			u1 = (hx2-2*hy2)*tmp/6;
			u2 =-(2*hx2-hy2)*tmp/6; 
			u3 =-(hx2+hy2)*tmp/6;

			B[0][0] = ud;
			B[0][1] = u1;
			B[0][2] = u2;
			B[0][3] = u3;
			
			B[1][0] = u1;
			B[1][1] = ud;
			B[1][2] = u3;
			B[1][3] = u2;
			
			B[2][0] = u2;
			B[2][1] = u3;
			B[2][2] = ud;
			B[2][3] = u1;

			B[3][0] = u3;
			B[3][1] = u2;
			B[3][2] = u1;
			B[3][3] = ud;

			ud = hx*hy/9.0;
			u1 = hx*hy/18.0;
			u2 = u1;
			u3 = hx*hy/36.0;

			C[0][0] = ud;
			C[0][1] = u1;
			C[0][2] = u2;
			C[0][3] = u3;
			
			C[1][0] = u1;
			C[1][1] = ud;
			C[1][2] = u3;
			C[1][3] = u2;
			
			C[2][0] = u2;
			C[2][1] = u3;
			C[2][2] = ud;
			C[2][3] = u1;

			C[3][0] = u3;
			C[3][1] = u2;
			C[3][2] = u1;
			C[3][3] = ud;

			F[0] =	C[0][0]*fv[0]+C[0][1]*fv[1]+
					C[0][2]*fv[2]+C[0][3]*fv[3];
			F[1] =	C[1][0]*fv[0]+C[1][1]*fv[1]+
					C[1][2]*fv[2]+C[1][3]*fv[3];
			F[2] =	C[2][0]*fv[0]+C[2][1]*fv[1]+
					C[2][2]*fv[2]+C[2][3]*fv[3];
			F[3] =	C[3][0]*fv[0]+C[3][1]*fv[1]+
					C[3][2]*fv[2]+C[3][3]*fv[3];

			Index[0] = Nx * k   + i;
			Index[1] = Nx * k   + i+1;
			Index[2] = Nx *(k+1)+ i;
			Index[3] = Nx *(k+1)+ i+1;

			for(i1=0;i1<4;i1++)
			{
				for(k1=0;k1<4;k1++)
					AddToMatrix(Index[i1],Index[k1],
								lambda*B[i1][k1]+gamma*C[i1][k1]);
				f[Index[i1]] += F[i1];
			}
				
		}
	
	// Учёт краевых условий первого рода
	for(i=0;i<Nx;i++)			// параллельно оси Х
	{
		px	= GridX[i];
		y	= GridY[0];
		di[i]	= 1.0e+50;
		f[i]	= 1.0e+50 * GetIdeal(px,y);
		y	= GridY[Ny-1];
		di[Nx*(Ny-1)+i]	= 1.0e+50;
		f[Nx*(Ny-1)+i]	= 1.0e+50 * GetIdeal(px,y);
	}
	
	for(k=0;k<Ny;k++)			// параллельно оси Y
	{
		y	= GridY[k];
		px	= GridX[0];
		di[k*Nx]	= 1.0e+50;
		f[k*Nx]		= 1.0e+50 * GetIdeal(px,y);
		px	= GridX[Nx-1];
		di[(k+1)*Nx-1]	= 1.0e+50;
		f[(k+1)*Nx-1]	= 1.0e+50 * GetIdeal(px,y);
	}
}

//	Факторизация
int method::AtoU()
{
	int i,j;
	for(i=0;i<N;i++)
	{
		for(j=ig[i];j<ig[i+1];j++)
		{
			L[j]=(ggl[j]-sm(i,jg[j]));
			U[j]=(ggu[j]-sm(jg[j],i))/diag[jg[j]];
		}
	diag[i]=di[i]-sm(i,i);
	}
	return 0;
}

//	Решение нижнего треугольника
void method::GaussL(double *in, double *out)
{
	int i,j;
	double result;
	for(i=0;i<N;i++)
	{
		result=0;
		for(j=ig[i];j<ig[i+1];j++)
		{
			result+=L[j]*out[jg[j]];
		}
		out[i]=(in[i]-result)/diag[i];
	}
}

//	Решение верхнего треугольника
void method::GaussU(double *in, double *out)
{
	int i,j;
	for(i=0;i<N;i++) out[i]=in[i];
	for(i=N-1;i>=0;i--)
	{
		for(j=ig[i];j<ig[i+1];j++)
		{
			out[jg[j]]-=U[j]*out[i];
		}
	}
}

//	Умножение матрицы на вектор
void method::MultVectorAndMatrix(double *in, double *out)
{
	int i,j;
	double *out1;
	out1 = new double[N];
	for(i=0;i<N;i++)
	{
		out1[i]=di[i]*in[i];
		for(j=ig[i];j<ig[i+1];j++)
		{
			out1[i]+=ggl[j]*in[jg[j]];
			out1[jg[j]]+=ggu[j]*in[i];
		}
	}

	for(i=0;i<N;i++)
		out[i]=out1[i];
	delete [] out1;
}

//	Скалярное произведение
double method::ScalarMult(double *v1, double *v2)
{
	int i;
	double result;
	result = 0;
	for(i=0;i<N;i++)
	{
		result+=v1[i]*v2[i];
	}
	return result;
}

//	Скалярное произведение для факторизации
double method::sm(int i,int j)
{
	int k,l,find;
	double result;
	result=0.0;
	if(i==j)
	{
		for(k=ig[i];k<ig[i+1];k++)
			result+=U[k]*L[k];
	}
	else
	{
		// верхний треугольник
		if(i>j)
		{
			for(k=ig[j];k<ig[j+1];k++)
			{
				find=0;
				for(l=ig[i];l<ig[i+1]&&find==0;l++)
				{
					if(jg[l]==jg[k])
					{
						result+=U[k]*L[l];
						find=1;
					}
				}
			}
		}
		// нижний треугольник
		else
		{
			for(l=ig[i];l<ig[i+1];l++)
			{
				find=0;
				for(k=ig[j];k<ig[j+1]&&find==0;k++)
				{
					if(jg[l]==jg[k])
					{
						result+=U[k]*L[l];
						find=1;
					}
				}
			}
		}
  
	}
	return result; 
}

//	Основная функция метода
void method::run()
{
	int iter;
	int i,check,stop;
	double alpha,alphazn,alphach,beta,betach,betazn,CheckExit;
	// Факторизация
	check = AtoU();
	if(check!=0) printf("Error in %d string",check+1);
	// Инициализация
	stop=0;
	for(i=0;i<N;i++) x[i]=0;
	GaussL(f,r);
	GaussU(r,z);
	MultVectorAndMatrix(z,q);
	GaussL(q,p);
	// Процесс решения СЛАУ
	for(iter=0;iter<maxiter && stop==0;iter++)
	{
		alphach=ScalarMult(p,r);
		alphazn=ScalarMult(p,p);
		alpha=alphach/alphazn;
		for(i=0;i<N;i++) x[i]+=alpha*z[i];
		for(i=0;i<N;i++) r[i]-=alpha*p[i];
		GaussU(r,s);
		MultVectorAndMatrix(s,sout);
		GaussL(sout,q);
		betazn=ScalarMult(p,p);
		betach=ScalarMult(p,q);
		beta=-betach/betazn;
		//GaussU(r,s);
		for(i=0;i<N;i++) z[i]=beta*z[i]+s[i];
		for(i=0;i<N;i++) p[i]=beta*p[i]+q[i];
		CheckExit=ScalarMult(r,r);
		printf("Nevazka  =  %le\n",CheckExit);
		if(CheckExit<eps) stop=1;
	}
}

//	Деструктор метода
method::~method()
{
	int i, k, num = 0;
	double px, y, func, res = 0.0, norm = 0.0, tmp;
	FILE *fout;
	fout=fopen("result.txt","w");
	fprintf(fout,"x\t\t\ty\t\t\tu\t\t\tu*\t\t\tresiduals\n");
	for(k=0;k<Ny;k++)
		for(i=0;i<Nx;i++) 
		{
			px = GridX[i];
			y = GridY[k];
			func = GetIdeal(px,y);
			tmp = fabs(x[num]-func);
			res += tmp*tmp;
			norm += func * func;
			
			fprintf(fout,"%f\t%f\t%f\t%f\t%e\n",
					px,y,x[num],func,tmp);
			num++;
		}
	fprintf(fout,"\nResiduals = %e",sqrt(res/norm));
	fclose(fout);
	delete global;
} 

//	Главная функция
int main()
{
	method mfe;
	mfe.run();
	return 0;
}
*/